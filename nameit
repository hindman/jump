#! /usr/bin/env python

import sys
import os.path as OP
import json
import argparse
from textwrap import dedent

__version__ = '1.1'

def usage():
    return dedent(u'''
        Usage:

            nameit --add NAME STRING [--literal] # Add a named path or literal string
            nameit --rm NAME                     # Delete a named string
            nameit --mv OLD_NAME NEW_NAME        # Change name of a string

            nameit NAME                          # Print a named string
            nameit                               # List all named strings

            nameit --help                        # Print help and exit

            Options also have a single-letter variant.
    ''').strip()

def main(args):
    '''
    The function called when the script is executed in the normal way.
    '''
    # Parse command line arguments, exiting on failure.
    opts, code, msg = parse_options(args)
    if msg:
        exit(**exit_info(opts, code, msg))

    # Load up the existing named paths.
    npf = named_paths_file()
    paths = load_named_paths(npf)

    # Take action.
    paths, save, code, msg = process_paths(opts, paths)
    if save:
        save_named_paths(npf, paths)
    exit(**exit_info(opts, code, msg))

def process_paths(opts, paths):
    '''
    Takes command-line options and a dict of named paths. Returns 4-tuple
    containing a new dict of named paths, along with some values to govern exit
    behavior for the script.
    '''
    # Initialze the 4 values that we will return, and define a lambda to get
    # (save, code, msg) values when invalid names are given.
    paths, save, code, msg = (dict(paths), True, 0, None)
    missing = lambda k: (False, 1, u'Name not found: {}'.format(k))

    # Add a new path (or change existing one).
    if opts.add:
        k, v = opts.add
        paths[k] = v if opts.literal else abspath(v)

    # Delete a path.
    elif opts.rm:
        k = opts.rm
        if k in paths: paths.pop(k)
        else:          save, code, msg = missing(k)

    # Rename a path.
    elif opts.mv:
        k1, k2 = opts.mv
        if k1 in paths: paths[k2] = paths.pop(k1)
        else:           save, code, msg = missing(k1)

    # Get a path by its name.
    elif opts.name:
        save = False
        k = opts.name
        if k in paths: msg = paths[k]
        else:          save, code, msg = missing(k)

    # Get all named paths, sorted by their paths.
    elif paths:
        save = False
        wid = max(map(len, paths))
        kvs = sorted(paths.items(), key = lambda t: t[1])
        fmt = u'{:<{}}   {}'.format
        msg = u'\n'.join(fmt(k, wid, v) for k, v in kvs)
    else:
        save = False
        msg = u'No names found.'

    # Boom!
    return (paths, save, code, msg)

def exit(code = None, stdout = None, stderr = None):
    '''
    Helper to exit script.
    '''
    if stderr: sys.stderr.write(stderr + '\n')
    if stdout: sys.stdout.write(stdout + '\n')
    sys.exit(code)

def exit_info(opts, code, msg):
    '''
    Helper to convert (opts, code, msg) into a dict suitable for exit().
    '''
    if code:
        stderr = msg
        stdout = '.' if opts.cd else None
    else:
        stderr = None
        stdout = msg
    return dict(code = code, stdout = stdout, stderr = stderr)

def named_paths_file():
    '''
    Returns the path to the user's named-paths JSON file.
    '''
    return OP.join(OP.expanduser('~'), '.nameitrc')

def save_named_paths(f, paths):
    '''
    Write paths dict as a JSON file.
    '''
    with open(f, 'w') as fh:
        json.dump(paths, fh, indent = 2)

def load_named_paths(f):
    '''
    Returns the named-paths JSON data as a dict.
    '''
    if OP.isfile(f):
        with open(f) as fh:
            return json.load(fh)
    else:
        return {}

def abspath(p):
    '''
    Takes a path and returns it in normalized, absolute form.
    '''
    return OP.abspath(OP.expanduser(p))

def parse_options(args):
    '''
    Takes a list of command-line arguments. Returns the parsed command-line
    options, along with a possible exit code and message.
    '''
    # We will a tuple of these values.
    opts, code, msg = (None, None, None)

    # Define the option parser.
    ap = ThrowingArgumentParser(add_help = False)
    ap.add_argument('name', nargs = '?')
    ap.add_argument('-a', '--add', nargs = 2)
    ap.add_argument('-r', '--rm')
    ap.add_argument('-m', '--mv', nargs = 2)
    ap.add_argument('-l', '--literal', action = 'store_true')
    ap.add_argument('--cd', action = 'store_true')
    ap.add_argument('-h', '--help', action = 'store_true')
    ap.add_argument('--version', action = 'store_true')

    # Return an error message if option parsing failed.
    try:
        opts = ap.parse_args(args)
    except Exception as e:
        return (opts, 1, unicode(e))

    # Return a usage or version message.
    if opts.help:
        return (opts, 0, usage())
    if opts.version:
        msg = '{} {}'.format(OP.basename(__file__), __version__)
        return (opts, 0, msg)

    # Return an error message if the user requested conflicting actions.
    ks = 'name add rm mv'.split()
    ks = [k for k in ks if getattr(opts, k)]
    if len(ks) > 1:
        msg = 'Conflicting arguments: {}'.format(', '.join(ks))
        return (opts, 1, msg)

    # Normal return.
    return (opts, code, msg)

class ThrowingArgumentParser(argparse.ArgumentParser):
    '''
    A command-line option parsing class that will raise on failure.
    '''
    def error(self, message):
        raise Exception(message.capitalize())

if __name__ == '__main__':
    main(sys.argv[1:])

